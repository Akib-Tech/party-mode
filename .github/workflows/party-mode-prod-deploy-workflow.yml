name: party-mode-prod-deploy
'on':
  push:
    branches:
      - develop
  workflow_dispatch: {}
concurrency:
  group: 'party-mode-prod-deploy-${{ github.ref }}'
  cancel-in-progress: true
jobs:
  prod-deploy:
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Firewall
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: '${{ secrets.DEPLOY_SERVER_HOST }}'
          username: '${{ secrets.DEPLOY_SERVER_SSH_USERNAME }}'
          password: '${{ secrets.DEPLOY_SERVER_SSH_PASSWORD }}'
          command: |
            echo 'y' | ufw enable
            ufw allow 'OpenSSH'
            ufw allow 'Nginx HTTPS'
            ufw default deny incoming
            ufw default allow outgoing
            ufw status verbose
      - name: Configure Nginx Server
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: '${{ secrets.DEPLOY_SERVER_HOST }}'
          username: '${{ secrets.DEPLOY_SERVER_SSH_USERNAME }}'
          password: '${{ secrets.DEPLOY_SERVER_SSH_PASSWORD }}'
          command: |
            # install Nginx
            apt install -y nginx

            # set nginx configuration
            rm /etc/nginx/nginx.conf

            cat > /etc/nginx/nginx.conf << EOF
            user www-data;
            worker_processes 1;

            error_log  /var/log/nginx/error.log;
            pid        /var/run/nginx.pid;
            events {
              worker_connections  1024;
            }

            http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              charset_types text/css text/plain text/vnd.wap.wml application/javascript application/json application/rss+xml application/xml;

              access_log    /var/log/nginx/access.log;

              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;

              gzip  on;
              gzip_http_version 1.0;
              gzip_comp_level 2;
              gzip_proxied any;
              gzip_vary off;
              gzip_types text/plain text/css application/x-javascript text/xml application/xml application/rss+xml application/atom+xml image/svg+xml text/javascript application/javascript application/json text/mathml;
              gzip_min_length  1000;
              gzip_disable     "MSIE [1-6]\.";

              variables_hash_max_size 1024;
              variables_hash_bucket_size 64;
              server_names_hash_bucket_size 128;
              types_hash_max_size 2048;
              types_hash_bucket_size 64;

              include /etc/nginx/conf.d/*.conf;
              include /etc/nginx/sites-enabled/*;
            }
            EOF

            # setup ssl certificate and key
            mkdir /etc/nginx/ssl

            cat > /etc/nginx/ssl/party-mode.pem << EOF
            ${{ secrets.DEPLOY_SERVER_SSL_CERT }}
            EOF

            openssl rsa -in /etc/nginx/ssl/party-mode.pem -out /etc/nginx/ssl/nginx.key

            # set nginx party mode server configuration
            rm /etc/nginx/sites-enabled/default

            cat > /etc/nginx/sites-available/party-mode << EOF
            server {
              listen 443 ssl;
              server_name $host;
              ssl_certificate /etc/nginx/ssl/party-mode.pem;
              ssl_certificate_key /etc/nginx/ssl/nginx.key;

              location / {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP  $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Server $host;

                proxy_cookie_path ~*^/.* /;

                proxy_pass http://127.0.0.1:8080;
              }
            }
            EOF

            ln -s /etc/nginx/sites-available/party-mode /etc/nginx/sites-enabled/party-mode

            # start nginx
            service nginx restart
      - name: Configure Nginx Server
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: '${{ secrets.DEPLOY_SERVER_HOST }}'
          username: '${{ secrets.DEPLOY_SERVER_SSH_USERNAME }}'
          password: '${{ secrets.DEPLOY_SERVER_SSH_PASSWORD }}'
          command: |
    # install Nginx
    apt install -y nginx
    
    # set nginx configuration
    rm /etc/nginx/nginx.conf
    
    cat > /etc/nginx/nginx.conf << EOF
    user www-data;
    worker_processes 1;
    
    error_log  /var/log/nginx/error.log;
    pid        /var/run/nginx.pid;
    events {
    worker_connections  1024;
  }

    http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    charset_types text/css text/plain text/vnd.wap.wml application/javascript application/json application/rss+xml application/xml;
    
    access_log    /var/log/nginx/access.log;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    gzip  on;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_proxied any;
    gzip_vary off;
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/rss+xml application/atom+xml image/svg+xml text/javascript application/javascript application/json text/mathml;
    gzip_min_length  1000;
    gzip_disable     "MSIE [1-6]\.";
    
    variables_hash_max_size 1024;
    variables_hash_bucket_size 64;
    server_names_hash_bucket_size 128;
    types_hash_max_size 2048;
    types_hash_bucket_size 64;
    
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
  }
    EOF
    
    # setup ssl certificate and key
    mkdir /etc/nginx/ssl
    
    cat > /etc/nginx/ssl/party-mode.pem << EOF
    ${{ secrets.DEPLOY_SERVER_SSL_CERT }}
    EOF
    
    openssl rsa -in /etc/nginx/ssl/party-mode.pem -out /etc/nginx/ssl/nginx.key
    
    # set nginx party mode server configuration
    rm /etc/nginx/sites-enabled/default
    
    cat > /etc/nginx/sites-available/party-mode << EOF
    server {
    listen 443 ssl;
    server_name $host;
    ssl_certificate /etc/nginx/ssl/party-mode.pem;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    
    location / {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    
    proxy_cookie_path ~*^/.* /;
    
    proxy_pass http://127.0.0.1:8080;
  }
  }
    EOF
    
    ln -s /etc/nginx/sites-available/party-mode /etc/nginx/sites-enabled/party-mode
    
    # start nginx
    service nginx restart

      - name: Deploy Party Mode Website Application
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: '${{ secrets.DEPLOY_SERVER_HOST }}'
          username: '${{ secrets.DEPLOY_SERVER_SSH_USERNAME }}'
          password: '${{ secrets.DEPLOY_SERVER_SSH_PASSWORD }}'
          command: |
            # verify app directory
            mkdir /app
            
            # re-clone repo
            cd /app
            rm -rf party-mode
            git clone --branch bins https://github.com/partymodellc/party-mode.git
            
            # re-setup node cli
            cd /app/party-mode/bin/nodejs
            
            xz -d -v node-v18.17.1-linux-x64.tar.xz
            tar -xf node-v18.17.1-linux-x64.tar
            
            rm /usr/bin/node
            mv node-v18.17.1-linux-x64/bin/node /usr/bin/
            
            # re-create systemd service
            cat > /etc/systemd/system/party-mode-backend.service << EOF
            [Unit]
            Description=Party Mode Backend
            After=network.target
            StartLimitIntervalSec=10
            
            [Service]
            Type=simple
            Restart=always
            RestartSec=1
            StartLimitBurst=5
            StartLimitIntervalSec=15
            User=pmadmin
            ExecStart=node /app/party-mode/backend/index.js
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            cat > /etc/systemd/system/party-mode-frontend.service << EOF
            [Unit]
            Description=Party Mode Frontend
            After=network.target
            StartLimitIntervalSec=10
            
            [Service]
            Type=simple
            Restart=always
            RestartSec=1
            StartLimitBurst=5
            StartLimitIntervalSec=15
            User=pmadmin
            ExecStart=node /app/party-mode/frontend/index.js
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # npm install
            cd /app/party-mode/backend
            NODE_ENV=production /app/party-mode/bin/nodejs/node-v18.17.1-linux-x64/lib/node_modules/npm/bin/npm-cli.js install
            
            cd /app/party-mode/frontend
            NODE_ENV=production /app/party-mode/bin/nodejs/node-v18.17.1-linux-x64/lib/node_modules/npm/bin/npm-cli.js install
            
            # restart service
            service party-mode-backend restart
            service party-mode-frontend restart
